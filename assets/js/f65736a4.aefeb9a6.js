"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[433],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var a=o.createContext({}),s=function(e){var n=o.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=s(e.components);return o.createElement(a.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(t),m=r,f=d["".concat(a,".").concat(m)]||d[m]||u[m]||i;return t?o.createElement(f,l(l({ref:n},p),{},{components:t})):o.createElement(f,l({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=d;var c={};for(var a in n)hasOwnProperty.call(n,a)&&(c[a]=n[a]);c.originalType=e,c.mdxType="string"==typeof e?e:r,l[1]=c;for(var s=2;s<i;s++)l[s]=t[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7056:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return a},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var o=t(7462),r=t(3366),i=(t(7294),t(3905)),l=["components"],c={title:"File Syncing"},a="File Syncing",s={unversionedId:"concepts/file_syncing",id:"concepts/file_syncing",title:"File Syncing",description:"In order to allow live development on the remote environment, Raftt keeps all the repository files synced between the local machine and the remote environment.",source:"@site/docs/concepts/file_syncing.md",sourceDirName:"concepts",slug:"/concepts/file_syncing",permalink:"/docs/concepts/file_syncing",tags:[],version:"current",frontMatter:{title:"File Syncing"},sidebar:"tutorialSidebar",previous:{title:"Raftt's Containers",permalink:"/docs/concepts/containers"},next:{title:"Port Mapping",permalink:"/docs/concepts/port_map"}},p=[{value:"Mounting a Synced Folder",id:"mounting-a-synced-folder",children:[],level:2},{value:"Overlaying Mounts",id:"overlaying-mounts",children:[],level:2}],u={toc:p};function d(e){var n=e.components,t=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"file-syncing"},"File Syncing"),(0,i.kt)("p",null,"In order to allow live development on the remote environment, Raftt keeps all the repository files synced between the local machine and the remote environment.   "),(0,i.kt)("p",null,"The whole repository is synced, excluding files ignored by git (defined in ",(0,i.kt)("inlineCode",{parentName:"p"},".gitignore")," files)."),(0,i.kt)("p",null,"Under the hood, the syncing is performed by an OSS tool called ",(0,i.kt)("a",{parentName:"p",href:"https://syncthing.net/"},"Syncthing"),"."),(0,i.kt)("h2",{id:"mounting-a-synced-folder"},"Mounting a Synced Folder"),(0,i.kt)("p",null,"You can specify bind mounts inside your docker-compose file to access the synced files in any of the services. For example, if you have the following docker-compose in the root of your repository:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"version: '3'\nservices:\n  web:\n    build: .\n    volumes:\n      - .:/app\n")),(0,i.kt)("p",null,"The sync repository directory will be mounted in the remote container at ",(0,i.kt)("inlineCode",{parentName:"p"},"/app"),"."),(0,i.kt)("p",null,"Similarly,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    volumes:\n      - ./models:/models\n")),(0,i.kt)("p",null,"Would mount the ",(0,i.kt)("inlineCode",{parentName:"p"},"models")," subdirectory to the destination container under ",(0,i.kt)("inlineCode",{parentName:"p"},"/models"),"."),(0,i.kt)("p",null,"By default, the dev container includes a mount of the entire synced folder in ",(0,i.kt)("inlineCode",{parentName:"p"},"/code"),". Feel free to move this to wherever is convenient for you! :)"),(0,i.kt)("h2",{id:"overlaying-mounts"},"Overlaying Mounts"),(0,i.kt)("p",null,"In some cases you may need to mount code ",(0,i.kt)("em",{parentName:"p"},"over")," existing content in the container. This works as expected. If you need to preserve some of it, you can accomplish that by using a volume:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"version: '3'\nservices:\n  web:\n    build: .\n    volumes:\n      - .:/app\n      - /app/node_modules\n")),(0,i.kt)("p",null,"This will make ",(0,i.kt)("inlineCode",{parentName:"p"},"/app"),' mounted to the synced repository, but within it "node_modules" will auto-initialize an unnamed volume with the contents of the file from the image. See the equivalent docker documentation ',(0,i.kt)("a",{parentName:"p",href:"https://docs.docker.com/storage/#tips-for-using-bind-mounts-or-volumes"},"here"),"."))}d.isMDXComponent=!0}}]);