"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[910],{3905:function(e,t,n){n.d(t,{Zo:function(){return h},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},h=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),p=s(n),f=o,d=p["".concat(c,".").concat(f)]||p[f]||u[f]||a;return n?r.createElement(d,i(i({ref:t},h),{},{components:n})):r.createElement(d,i({ref:t},h))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9329:function(e,t,n){n.r(t),n.d(t,{assets:function(){return h},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],l={title:"Git Workflow Integration"},c="Git Workflow Integration",s={unversionedId:"concepts/git_workflows",id:"concepts/git_workflows",title:"Git Workflow Integration",description:"One of Raftt's unique benefits is its integration with your Git workflow, allowing you to switch between branches without worrying about the state of your dev environment. When leaving a branch while having an active environment, the whole env is deactivated but kept for future use, while the new branch enjoys a clean environment.",source:"@site/docs/concepts/git_workflows.md",sourceDirName:"concepts",slug:"/concepts/git_workflows",permalink:"/concepts/git_workflows",draft:!1,tags:[],version:"current",frontMatter:{title:"Git Workflow Integration"},sidebar:"tutorialSidebar",previous:{title:"Dev-mode",permalink:"/concepts/dev_mode"},next:{title:"Raftt's Containers",permalink:"/concepts/containers"}},h={},u=[{value:"New Branch",id:"new-branch",level:2},{value:"Branch with Deactivated Env",id:"branch-with-deactivated-env",level:2},{value:"Idle Environments",id:"idle-environments",level:2}],p={toc:u};function f(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"git-workflow-integration"},"Git Workflow Integration"),(0,a.kt)("p",null,"One of Raftt's unique benefits is its integration with your Git workflow, allowing you to switch between branches without worrying about the state of your dev environment. When leaving a branch while having an active environment, the whole env is deactivated but kept for future use, while the new branch enjoys a clean environment."),(0,a.kt)("p",null,"In the following section, we'll describe what happens when users switch to a different branch using ",(0,a.kt)("inlineCode",{parentName:"p"},"git checkout"),".\nThe details differ depending on whether the checked-out branch has a previously deactivated environment or not:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"A new branch - the newly checked-out branch doesn't have a deactivated environment."),(0,a.kt)("li",{parentName:"ol"},"A branch with a deactivated env - the newly checked-out branch already had an active env that was deactivated by checking out another branch.")),(0,a.kt)("h2",{id:"new-branch"},"New Branch"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The user checks out the code on the local machine."),(0,a.kt)("li",{parentName:"ol"},"Raftt recognizes it using githooks and notifies Raftt's backend."),(0,a.kt)("li",{parentName:"ol"},"The backend deactivates the running environment."),(0,a.kt)("li",{parentName:"ol"},"The container starts a new environment for the new branch, similar to what is described in ",(0,a.kt)("a",{parentName:"li",href:"/intro/how_raftt_works#spawning-an-environment"},"how Raftt works?"),".")),(0,a.kt)("h2",{id:"branch-with-deactivated-env"},"Branch with Deactivated Env"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The user checks out the code in the local machine."),(0,a.kt)("li",{parentName:"ol"},"Raftt recognizes it using githooks and notifies Raftt's backend."),(0,a.kt)("li",{parentName:"ol"},'The backend "deactivates" the running environment.'),(0,a.kt)("li",{parentName:"ol"},'Subsequently, the backend recognizes that the new branch has a "deactivated" environment.'),(0,a.kt)("li",{parentName:"ol"},"If the environment is ",(0,a.kt)("a",{parentName:"li",href:"#idle-environments"},'"frozen"'),", the environment is woken up:",(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"A new environment controller is built."),(0,a.kt)("li",{parentName:"ol"},"All of its containers are loaded."),(0,a.kt)("li",{parentName:"ol"},"The containers' states are restored from backup."),(0,a.kt)("li",{parentName:"ol"},"The storage is restored from backup.")))),(0,a.kt)("p",null,"As you may notice, the first three steps remain the same in both configurations - regardless of the branch state."),(0,a.kt)("h2",{id:"idle-environments"},"Idle Environments"),(0,a.kt)("p",null,"Environments that are idle for too long can become ",(0,a.kt)("a",{parentName:"p",href:"#idle-environments"},'"frozen"'),'. This keeps the data stored but saves the computing resources. Moreover, you can always come back to a "frozen" environment - it will just take slightly longer.'),(0,a.kt)("p",null,"Environments are also frozen when ",(0,a.kt)("inlineCode",{parentName:"p"},"raftt down --hibernate")," is run in a repo with an active Raftt environment. Running ",(0,a.kt)("inlineCode",{parentName:"p"},"raftt down")," destroys the environment without keeping the data."),(0,a.kt)("p",null,"When freezing the environment, Raftt performs the following operations:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The containers' states are backed up."),(0,a.kt)("li",{parentName:"ol"},"The storage is backed up."),(0,a.kt)("li",{parentName:"ol"},"The containers are taken down.")),(0,a.kt)("admonition",{title:"Note",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Raftt freezes the environment in the background and wakes them up as needed - this isn't something you need to track manually.")))}f.isMDXComponent=!0}}]);