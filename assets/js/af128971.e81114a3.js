"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[878],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=u(e,["components","mdxType","originalType","parentName"]),p=s(n),m=r,g=p["".concat(l,".").concat(m)]||p[m]||c[m]||o;return n?a.createElement(g,i(i({ref:t},d),{},{components:n})):a.createElement(g,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u.mdxType="string"==typeof e?e:r,i[1]=u;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5162:function(e,t,n){n.d(t,{Z:function(){return i}});var a=n(7294),r=n(6010),o="tabItem_Ymn6";function i(e){var t=e.children,n=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:n},t)}},4866:function(e,t,n){n.d(t,{Z:function(){return N}});var a=n(7462),r=n(7294),o=n(6010),i=n(2466),u=n(6775),l=n(1980),s=n(7392),d=n(12);function c(e){return function(e){var t,n;return null!=(t=null==(n=r.Children.map(e,(function(e){if(!e||(0,r.isValidElement)(e)&&(t=e.props)&&"object"==typeof t&&"value"in t)return e;var t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:n.filter(Boolean))?t:[]}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function p(e){var t=e.values,n=e.children;return(0,r.useMemo)((function(){var e=null!=t?t:c(n);return function(e){var t=(0,s.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,n])}function m(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function g(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId,o=(0,u.k6)(),i=function(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:n,groupId:a});return[(0,l._X)(i),(0,r.useCallback)((function(e){if(i){var t=new URLSearchParams(o.location.search);t.set(i,e),o.replace(Object.assign({},o.location,{search:t.toString()}))}}),[i,o])]}function f(e){var t,n,a,o,i=e.defaultValue,u=e.queryString,l=void 0!==u&&u,s=e.groupId,c=p(e),f=(0,r.useState)((function(){return function(e){var t,n=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}var r=null!=(t=a.find((function(e){return e.default})))?t:a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:i,tabValues:c})})),h=f[0],b=f[1],k=g({queryString:l,groupId:s}),y=k[0],v=k[1],w=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:s}.groupId),n=(0,d.Nk)(t),a=n[0],o=n[1],[a,(0,r.useCallback)((function(e){t&&o.set(e)}),[t,o])]),N=w[0],T=w[1],C=function(){var e=null!=y?y:N;return m({value:e,tabValues:c})?e:null}();return(0,r.useLayoutEffect)((function(){C&&b(C)}),[C]),{selectedValue:h,selectValue:(0,r.useCallback)((function(e){if(!m({value:e,tabValues:c}))throw new Error("Can't select invalid tab value="+e);b(e),v(e),T(e)}),[v,T,c]),tabValues:c}}var h=n(2389),b="tabList__CuJ",k="tabItem_LNqP";function y(e){var t=e.className,n=e.block,u=e.selectedValue,l=e.selectValue,s=e.tabValues,d=[],c=(0,i.o5)().blockElementScrollPositionUntilNextRender,p=function(e){var t=e.currentTarget,n=d.indexOf(t),a=s[n].value;a!==u&&(c(t),l(a))},m=function(e){var t,n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":var a,r=d.indexOf(e.currentTarget)+1;n=null!=(a=d[r])?a:d[0];break;case"ArrowLeft":var o,i=d.indexOf(e.currentTarget)-1;n=null!=(o=d[i])?o:d[d.length-1]}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},s.map((function(e){var t=e.value,n=e.label,i=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:u===t?0:-1,"aria-selected":u===t,key:t,ref:function(e){return d.push(e)},onKeyDown:m,onClick:p},i,{className:(0,o.Z)("tabs__item",k,null==i?void 0:i.className,{"tabs__item--active":u===t})}),null!=n?n:t)})))}function v(e){var t=e.lazy,n=e.children,a=e.selectedValue,o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){var i=o.find((function(e){return e.props.value===a}));return i?(0,r.cloneElement)(i,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a})})))}function w(e){var t=f(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",b)},r.createElement(y,(0,a.Z)({},e,t)),r.createElement(v,(0,a.Z)({},e,t)))}function N(e){var t=(0,h.Z)();return r.createElement(w,(0,a.Z)({key:String(t)},e))}},3838:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return d},default:function(){return f},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return m}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=n(4866),u=n(5162),l=["components"],s={title:"Node.js"},d="Node.js Debugging",c={unversionedId:"debugging/node",id:"debugging/node",title:"Node.js",description:"Raftt supports interactive Node.js debugging using JetBrains IDEs and VS Code.",source:"@site/docs/debugging/node.md",sourceDirName:"debugging",slug:"/debugging/node",permalink:"/debugging/node",draft:!1,tags:[],version:"current",frontMatter:{title:"Node.js"},sidebar:"tutorialSidebar",previous:{title:"Debugging",permalink:"/debugging"},next:{title:"Go",permalink:"/debugging/go"}},p={},m=[{value:"Configuration",id:"configuration",level:2},{value:"Create a run/debug configuration",id:"create-a-rundebug-configuration",level:3},{value:"Add a builder to the env",id:"add-a-builder-to-the-env",level:3},{value:"Create a before launch task",id:"create-a-before-launch-task",level:3},{value:"Create a preLaunchTask",id:"create-a-prelaunchtask",level:3},{value:"Add the task to the run/debug configuration",id:"add-the-task-to-the-rundebug-configuration",level:3},{value:"Debugging",id:"debugging",level:2}],g={toc:m};function f(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"nodejs-debugging"},"Node.js Debugging"),(0,o.kt)("p",null,"Raftt supports interactive Node.js debugging using JetBrains IDEs and VS Code."),(0,o.kt)("p",null,"To debug with Raftt, you must first install Raftt's IDE plugin. See ",(0,o.kt)("a",{parentName:"p",href:"/intro/installation#raftt-ide-plugin"},"here")," for installation instructions."),(0,o.kt)("p",null,"This guide focuses on debugging Node.js workloads that use package managers such as ",(0,o.kt)("inlineCode",{parentName:"p"},"npm")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"Yarn"),". You can find below instructions for debugging without using any package manager.",(0,o.kt)("br",{parentName:"p"}),"\n","It's also possible to debug TypeScript, but it requires some ",(0,o.kt)("a",{parentName:"p",href:"#add-a-builder-to-the-env"},"additional configuration")," for compiling the code."),(0,o.kt)("h2",{id:"configuration"},"Configuration"),(0,o.kt)("h3",{id:"create-a-rundebug-configuration"},"Create a run/debug configuration"),(0,o.kt)("p",null,"The method for configuring a run/debug configuration differs between different IDEs."),(0,o.kt)(i.Z,{className:"unique-tabs",groupId:"IDEs",mdxType:"Tabs"},(0,o.kt)(u.Z,{value:"JetBrains",label:"JetBrains IDEs",default:!0,mdxType:"TabItem"},(0,o.kt)("p",null,'To debug with Raftt, start by defining a "standard" debug configuration, as if you would debug the process locally. The configuration can either be of type ',(0,o.kt)("a",{parentName:"p",href:"https://www.jetbrains.com/help/idea/run-debug-configuration-npm.html"},"npm")," (also supports non-npm package managers) or type ",(0,o.kt)("a",{parentName:"p",href:"https://www.jetbrains.com/help/idea/run-debug-configuration-node-js.html"},"Node.js"),", depends on whether or not you are using a package manager."),(0,o.kt)("p",null,"Then, add a single env var called ",(0,o.kt)("inlineCode",{parentName:"p"},"RAFTT_WORKLOAD")," stating the workload to debug."),(0,o.kt)("p",null,"For example, here you can see the configuration for debugging the ",(0,o.kt)("inlineCode",{parentName:"p"},"currency")," service, as a part of our ",(0,o.kt)("a",{parentName:"p",href:"/basics/tutorials/connect_mode"},"tutorial")," -"),(0,o.kt)("p",{align:"center"},(0,o.kt)("img",{src:"https://raftt-resources.s3.eu-central-1.amazonaws.com/docs/debugging/jetbrains/node.png",alt:"Node.js run/debug config in IntelliJ"})),(0,o.kt)("admonition",{title:"Note",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The Node interpreter that is used while debugging is the one installed in the remote container, not the one in the run/debug config.",(0,o.kt)("br",{parentName:"p"}),"\n","You can even omit its definition, but you'll get a warning message you'll have to skip every time you run/debug with Raftt.")),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("h3",{style:{marginBottom:0}},"Debugging a sidecar container")),(0,o.kt)("p",null,"To debug a sidecar container, add an additional env var - ",(0,o.kt)("inlineCode",{parentName:"p"},"RAFTT_CONTAINER"),", whose value is the debugged container name. If not stated, the selected container is the workload's main container - either the one annotated as default, or if no container is annotated - the first one in the manifest.")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},'To easily share your run/debug configuration with the rest of the team, mark the "store as project file" checkbox and commit the new file, typically located under ',(0,o.kt)("inlineCode",{parentName:"p"},".run"),", to the repo."))),(0,o.kt)(u.Z,{value:"VSCode",label:"VS Code",mdxType:"TabItem"},(0,o.kt)("p",null,'To debug with Raftt, start by defining a "standard" debug configuration in your ',(0,o.kt)("inlineCode",{parentName:"p"},"launch.json")," file, as if you would debug the process locally. For help creating such a configuration, see VS Code ",(0,o.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_launch-configuration"},"docs"),"."),(0,o.kt)("p",null,"Then, add the ",(0,o.kt)("inlineCode",{parentName:"p"},"raftt")," attribute to the debug config. This attribute has a single property, stating the ",(0,o.kt)("inlineCode",{parentName:"p"},"workload")," to debug."),(0,o.kt)("p",null,"For example, here you can see the configuration for debugging the ",(0,o.kt)("inlineCode",{parentName:"p"},"currency")," service of our ",(0,o.kt)("a",{parentName:"p",href:"/basics/tutorials/connect_mode"},"sample project")," -"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "currency",\n    "type": "node",\n    "request": "launch",\n    "program": "${workspaceFolder}/src/currencyservice/server.js",\n    "skipFiles": [\n        "<node_internals>/**",\n    ],\n    "cwd": "${workspaceFolder}/src/currencyservice",\n    "raftt": {\n        "workload": "currency"\n    }\n}\n')),(0,o.kt)("details",null,(0,o.kt)("summary",null,(0,o.kt)("h3",{style:{marginBottom:0}},"Debugging a sidecar container")),(0,o.kt)("p",null,"To debug a sidecar container, add a property to the ",(0,o.kt)("inlineCode",{parentName:"p"},"raftt")," attribute - ",(0,o.kt)("inlineCode",{parentName:"p"},"container"),", whose value is the debugged container name. If not stated, the selected container is the workload's main container - either the one annotated as default, or if no container is annotated - the first one in the manifest."),(0,o.kt)("p",null,"Here you can see how to debug a container named ",(0,o.kt)("inlineCode",{parentName:"p"},"sidecar")," (that doesn't really exist in our sample project) -"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "currency",\n    "type": "node",\n    "request": "launch",\n    "program": "${workspaceFolder}/src/currencyservice/server.js",\n    "skipFiles": [\n        "<node_internals>/**",\n    ],\n    "cwd": "${workspaceFolder}/src/currencyservice",\n    "raftt": {\n        "workload": "currency",\n        "container": "sidecar"\n    }\n}\n'))),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"To easily share your run/debug configuration with team members, make sure your ",(0,o.kt)("inlineCode",{parentName:"p"},"launch.json")," file is committed to the project repo.")))),(0,o.kt)("admonition",{title:"Using Node.js without typescript?",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"You're ready to start debugging, ",(0,o.kt)("a",{parentName:"p",href:"#debugging"},"see below"),". The rest of the ",(0,o.kt)("inlineCode",{parentName:"p"},"configuration")," section is only relevant if you use TypeScript.")),(0,o.kt)("h3",{id:"add-a-builder-to-the-env"},"Add a builder to the env"),(0,o.kt)("p",null,"Compiling Node.js code is a process that can take a significant time, but caching can improve the build times significantly. For that reason, we recommend adding dedicated workload that will handle the compilation for all services, which will allow sharing the cache. To do that you need to add its definition to the project and configure it in your ",(0,o.kt)("a",{parentName:"p",href:"/config/rafttfile"},(0,o.kt)("inlineCode",{parentName:"a"},".raftt"))," file."),(0,o.kt)("p",null,"The currency service in our sample project is JavaScript, not TypeScript, but in the coming sections we'll use it as an example, as if it were TypeScript-based."),(0,o.kt)("p",null,"The pod can be defined in a ",(0,o.kt)("inlineCode",{parentName:"p"},".yml")," file as follows, let's say it's called ",(0,o.kt)("inlineCode",{parentName:"p"},"builder.yml")," -"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: builder\n  selector:\n    matchLabels:\n      app: builder\n  template:\n    metadata:\n      labels:\n        app: builder\n    spec:\n      containers:\n      - name: builder\n        image: node:latest\n        workingDir: /src \n")),(0,o.kt)("p",null,"This deployment needs to be deployed to the env and have mounts that will allow it to compile the code. These things are defined in the ",(0,o.kt)("a",{parentName:"p",href:"/config/rafttfile"},(0,o.kt)("inlineCode",{parentName:"a"},".raftt"))," file -"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Import the builder workload, use the path in which you put the .yml file\nbuilder_resources = k8s_manifests("./builder.yml")\nbuilder = builder_resources.deployments["builder"]\n\n# Fetch the currency workload, assuming `resources` was imported earlier\ncurrency = resources.deployments["currency"]\n\n# Mount the source code and the compiled artifact folder to\n# both the application workload and the builder\ncurrency_out = volume("currency-out")\nbuilder.mount(repo_root.subpath("src/currencyservice"), "/src")\ncurrency.mount(repo_root.subpath("src/currencyservice"), "/src")\nbuilder.mount(currency_out, "/src/dist")\ncurrency.mount(currency_out, "/app", init_on_rebuild=True)\n\n# Mount the node-modules so that mounting the code dir doesn\'t \n# override the node-modules that came with the image\nnode_modules = volume("node-modules")\nbuilder.mount(node_modules, "/src/node_modules")\ncurrency.mount(node_modules, "/app/node_modules", init_on_rebuild=True)\n\n\n# Mark the builder workload to be added to the env when you run `raftt connect`\ndeploy_on_connect(builder_resources)\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"In the example above we assumed the app container runs the app from ",(0,o.kt)("inlineCode",{parentName:"p"},"/app"),", e.g., ",(0,o.kt)("inlineCode",{parentName:"p"},"node /app/server.js")," and that the TypeScript build command builds the artifact to ",(0,o.kt)("inlineCode",{parentName:"p"},"/src/dist")," (configured in the ",(0,o.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html"},(0,o.kt)("inlineCode",{parentName:"a"},"tsconfig.json"))," file)")),(0,o.kt)("p",null,"You now need to define a ",(0,o.kt)("inlineCode",{parentName:"p"},"before launch task")," or a ",(0,o.kt)("inlineCode",{parentName:"p"},"preLaunchTask"),", depending on the IDE -"),(0,o.kt)(i.Z,{className:"unique-tabs",groupId:"IDEs",mdxType:"Tabs"},(0,o.kt)(u.Z,{value:"JetBrains",label:"JetBrains IDEs",default:!0,mdxType:"TabItem"},(0,o.kt)("h3",{id:"create-a-before-launch-task"},"Create a before launch task"),(0,o.kt)("p",null,"To recompile your code before every run/debug session, you need to define a ",(0,o.kt)("a",{parentName:"p",href:"https://www.jetbrains.com/help/idea/run-debug-configurations-dialog.html#before-launch-options"},"before launch task")," in you debug configuration. Create a task of the type ",(0,o.kt)("inlineCode",{parentName:"p"},"Run on Raftt Workload")," and define what build script to run and where -"),(0,o.kt)("p",{align:"center"},(0,o.kt)("img",{src:"https://raftt-resources.s3.eu-central-1.amazonaws.com/docs/debugging/jetbrains/node_before_launch.png",alt:"Run on Raftt Workload before launch task on IntelliJ for Node"})),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},'To easily share your run/debug configuration with the rest of the team, mark the "store as project file" checkbox and commit the new file, typically located under ',(0,o.kt)("inlineCode",{parentName:"p"},".run"),", to the repo."))),(0,o.kt)(u.Z,{value:"VSCode",label:"VS Code",mdxType:"TabItem"},(0,o.kt)("h3",{id:"create-a-prelaunchtask"},"Create a preLaunchTask"),(0,o.kt)("p",null,"To recompile your code before every run/debug session, you first need to define a task in the project's ",(0,o.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/docs/editor/tasks"},(0,o.kt)("inlineCode",{parentName:"a"},"tasks.json"))," file (create it if it doesn't already exist). The task should define a build task in the builder workload, using ",(0,o.kt)("inlineCode",{parentName:"p"},"raftt sh")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"builder"),". For example, here you can see the build task for the currency service of our ",(0,o.kt)("a",{parentName:"p",href:"/basics/tutorials/connect_mode"},"sample project")," -"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "label": "build-currency",\n    "type": "shell",\n    "command": "raftt sh builder -- tsc",\n    "group": "build",\n    "detail": "Build currency service"\n}\n')),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Once configured, you can trigger the build task without starting a run/debug session using ",(0,o.kt)("inlineCode",{parentName:"p"},"Tasks: Run build commands")," from the command palette, or using the ",(0,o.kt)("inlineCode",{parentName:"p"},"cmd/ctrl+shift+B")," keyboard shortcut.")),(0,o.kt)("h3",{id:"add-the-task-to-the-rundebug-configuration"},"Add the task to the run/debug configuration"),(0,o.kt)("p",null,"You now need to assign the preLaunchTask to the debug configuration you ",(0,o.kt)("a",{parentName:"p",href:"#create-a-rundebug-configuration"},"previously")," added to your ",(0,o.kt)("inlineCode",{parentName:"p"},"launch.json")," file -"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "name": "currency",\n    "type": "node",\n    "request": "launch",\n    "program": "${workspaceFolder}/src/currencyservice/server.js",\n    "skipFiles": [\n        "<node_internals>/**",\n    ],\n    "cwd": "${workspaceFolder}/src/currencyservice",\n    "raftt": {\n        "workload": "currency"\n    },\n    "preLaunchTask": "build-currency"\n}\n')),(0,o.kt)("p",null,"Note the ",(0,o.kt)("inlineCode",{parentName:"p"},"program")," is the path to which the build artifact is mounted (or copied) in the ",(0,o.kt)("inlineCode",{parentName:"p"},"currency")," workload."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"To easily share your run/debug configuration with team members, make sure your ",(0,o.kt)("inlineCode",{parentName:"p"},"launch.json")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"tasks.json")," file is committed to the project repo.")))),(0,o.kt)("h2",{id:"debugging"},"Debugging"),(0,o.kt)("p",null,"Once you completed the configuration, you can experience fully-featured interactive debugging directly in your cluster, including breakpoints, stepping, watching and modifying variables, etc..",(0,o.kt)("br",{parentName:"p"}),"\n","The method for starting a run/debug session with Raftt differs between different IDEs - "),(0,o.kt)(i.Z,{className:"unique-tabs",groupId:"IDEs",mdxType:"Tabs"},(0,o.kt)(u.Z,{value:"JetBrains",label:"JetBrains IDEs",default:!0,mdxType:"TabItem"},(0,o.kt)("p",null,"To start a run/debug session with Raftt, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"Run with Raftt")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"Debug with Raftt")," blue buttons, or select these options from the ",(0,o.kt)("inlineCode",{parentName:"p"},"Run")," menu."),(0,o.kt)("p",{align:"center"},(0,o.kt)("img",{src:"https://raftt-resources.s3.eu-central-1.amazonaws.com/docs/debugging/jetbrains/debug_buttons.png",alt:"Run/debug with Raftt buttons in IntelliJ"}))),(0,o.kt)(u.Z,{value:"VSCode",label:"VS Code",mdxType:"TabItem"},(0,o.kt)("p",null,"Starting a run/debug session with a configuration that has the ",(0,o.kt)("inlineCode",{parentName:"p"},"raftt")," attribute will automatically start a Raftt debugging session. This can be triggered using the debugging pane in the side bar, keyboard shortcuts or the command palette."))))}f.isMDXComponent=!0}}]);