"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[947],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=l(n),f=a,g=p["".concat(u,".").concat(f)]||p[f]||s[f]||o;return n?r.createElement(g,i(i({ref:t},d),{},{components:n})):r.createElement(g,i({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8255:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={title:".NET"},i=".NET Debugging",c={unversionedId:"debugging/dotnet",id:"debugging/dotnet",title:".NET",description:"Raftt supports interactive .NET debugging using JetBrains Rider. Support for VS Code is coming soon!",source:"@site/docs/debugging/dotnet.md",sourceDirName:"debugging",slug:"/debugging/dotnet",permalink:"/debugging/dotnet",draft:!1,tags:[],version:"current",frontMatter:{title:".NET"},sidebar:"tutorialSidebar",previous:{title:"Java",permalink:"/debugging/java"},next:{title:"cli_reference",permalink:"/cli_reference"}},u={},l=[{value:"Configuration",id:"configuration",level:2},{value:"Add a builder container",id:"add-a-builder-container",level:3},{value:"Create a run/debug configuration",id:"create-a-rundebug-configuration",level:3},{value:"Create a before launch task",id:"create-a-before-launch-task",level:3}],d={toc:l};function s(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"net-debugging"},".NET Debugging"),(0,a.kt)("p",null,"Raftt supports interactive .NET debugging using JetBrains Rider. Support for VS Code is coming soon!"),(0,a.kt)("p",null,"To debug with Raftt, you must first install Raftt's IDE plugin. See ",(0,a.kt)("a",{parentName:"p",href:"/intro/installation#raftt-ide-plugin"},"here")," for installation instructions."),(0,a.kt)("h2",{id:"configuration"},"Configuration"),(0,a.kt)("p",null,"To configure .NET debugging you need to define two things -"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Where and when to compile your .NET binary",(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"Add a builder container to the workload"),(0,a.kt)("li",{parentName:"ol"},"Define a before launch task"))),(0,a.kt)("li",{parentName:"ol"},"Create a run/debug configuration")),(0,a.kt)("h3",{id:"add-a-builder-container"},"Add a builder container"),(0,a.kt)("p",null,"The best way to let your env compile .NET binaries without modifying your application container is by adding a builder container to the pod. This can be easily defined in your ",(0,a.kt)("inlineCode",{parentName:"p"},".raftt")," file. Here you can see the configuration for adding a builder container to the ",(0,a.kt)("inlineCode",{parentName:"p"},"cart")," service of our ",(0,a.kt)("a",{parentName:"p",href:"/basics/tutorials/connect_mode"},"sample project")," -"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'cart = resources.deployments["cart"]\n\n# Define the container and add it to the workload\nbuilder = Container(yaml="""\nname: builder\nimage: mcr.microsoft.com/dotnet/sdk:7.0.201\nworkingDir: /src\n""")\ncart.spec.template.spec.containers.append(builder)\n\n# Mount the source code and the compiled artifact folder to\n# both the application container and the builder container\ncart_out = volume("cart-out")\ncart.mount(repo_root.subpath("src/cartservice/src"), "/src", container="builder")\ncart.mount(repo_root.subpath("src/cartservice/src"), "/src")\ncart.mount(cart_out, "/tmp/out", container="builder")\ncart.mount(cart_out, "/app", init_on_rebuild=True)\n')),(0,a.kt)("h3",{id:"create-a-rundebug-configuration"},"Create a run/debug configuration"),(0,a.kt)("p",null,"To debug with Raftt, define a run/debug configuration of the type ",(0,a.kt)("inlineCode",{parentName:"p"},".NET Executable with Raftt"),". Its fields are equivalent to a ",(0,a.kt)("a",{parentName:"p",href:"https://www.jetbrains.com/help/rider/Run_Debug_Configuration.html"},"standard .NET run/debug config"),". The main difference is that with Raftt, the ",(0,a.kt)("inlineCode",{parentName:"p"},"Executable Path")," parameter doesn't refer to a file that exists locally, but to a file inside the debugged workload. It should contain the path of the artifact created by the compilation (see ",(0,a.kt)("a",{parentName:"p",href:"#create-a-before-launch-task"},"below")," for the compilation definition). Then, add a single env var called ",(0,a.kt)("inlineCode",{parentName:"p"},"RAFTT_WORKLOAD")," stating the workload to debug."),(0,a.kt)("p",null,"Here you can see the configuration for the ",(0,a.kt)("inlineCode",{parentName:"p"},"cart")," service of our ",(0,a.kt)("a",{parentName:"p",href:"/basics/tutorials/connect_mode"},"sample project")," -"),(0,a.kt)("p",{align:"center"},(0,a.kt)("img",{src:"https://raftt-resources.s3.eu-central-1.amazonaws.com/docs/debugging/jetbrains/dotnet.png",alt:".NET Executable with Raftt run/debug config in Rider"})),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",{style:{marginBottom:0}},"Debugging a sidecar container")),(0,a.kt)("p",null,"To debug a sidecar container, add an additional env var - ",(0,a.kt)("inlineCode",{parentName:"p"},"RAFTT_CONTAINER"),", whose value is the debugged container name. If not stated, the selected container is the workload's main container - either the one annotated as default, or if no container is annotated - the first one in the manifest.")),(0,a.kt)("h3",{id:"create-a-before-launch-task"},"Create a before launch task"),(0,a.kt)("p",null,"To recompile your code before every run/debug session, you need to define a ",(0,a.kt)("a",{parentName:"p",href:"https://www.jetbrains.com/help/idea/run-debug-configurations-dialog.html#before-launch-options"},"before launch task")," in you debug configuration. Create a task of the type ",(0,a.kt)("inlineCode",{parentName:"p"},"Run on Raftt Workload")," and define what build script to run and where -"),(0,a.kt)("p",{align:"center"},(0,a.kt)("img",{src:"https://raftt-resources.s3.eu-central-1.amazonaws.com/docs/debugging/jetbrains/dotnet_before_launch.png",alt:"Run on Raftt Workload before launch task on Rider"})),(0,a.kt)("p",null,"The command is ",(0,a.kt)("inlineCode",{parentName:"p"},"dotnet publish cartservice.csproj -c debug -o /tmp/out")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},'To easily share your run/debug configuration with the rest of the team, mark the "store as project file" checkbox and commit the new file, typically located under ',(0,a.kt)("inlineCode",{parentName:"p"},".run"),", to the repo.")))}s.isMDXComponent=!0}}]);