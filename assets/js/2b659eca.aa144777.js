"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[576],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(n),u=o,h=m["".concat(l,".").concat(u)]||m[u]||c[u]||r;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9726:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return c}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=["components"],s={title:"The .raftt File"},l=void 0,p={unversionedId:"config/rafttfile",id:"config/rafttfile",title:"The .raftt File",description:"Overview",source:"@site/docs/config/rafttfile.md",sourceDirName:"config",slug:"/config/rafttfile",permalink:"/docs/config/rafttfile",draft:!1,tags:[],version:"current",frontMatter:{title:"The .raftt File"},sidebar:"tutorialSidebar",previous:{title:"raftt.yml",permalink:"/docs/config/raftt.yml"},next:{title:"Dev Container",permalink:"/docs/config/dev_container"}},d={},c=[{value:"Overview",id:"overview",level:2},{value:"What is a <code>.raftt</code> File",id:"what-is-a-raftt-file",level:3},{value:"Configuring the <code>.raftt</code> File in <code>raftt.yml</code>",id:"configuring-the-raftt-file-in-rafttyml",level:3},{value:"When is the <code>.raftt</code> File Evaluated",id:"when-is-the-raftt-file-evaluated",level:3},{value:"On <code>raftt up</code>",id:"on-raftt-up",level:4},{value:"On <code>raftt rebuild</code>",id:"on-raftt-rebuild",level:4},{value:"The <code>deploy()</code> Function",id:"the-deploy-function",level:3},{value:"Data Types",id:"data-types",level:2},{value:"Starlark Data Types",id:"starlark-data-types",level:3},{value:"Resources",id:"resources",level:3},{value:"Merging <code>Resources</code> Objects",id:"merging-resources-objects",level:4},{value:"RepoWorkingTree",id:"repoworkingtree",level:3},{value:"Importing Resource Definitions",id:"importing-resource-definitions",level:2},{value:"Import a Docker-compose File",id:"import-a-docker-compose-file",level:3},{value:"Import Kubernetes Manifests",id:"import-kubernetes-manifests",level:3},{value:"Import Helm Charts",id:"import-helm-charts",level:3},{value:"Image Building",id:"image-building",level:2},{value:"Using Base Images",id:"using-base-images",level:3},{value:"Enhancing and Modifying the Resources",id:"enhancing-and-modifying-the-resources",level:2},{value:"Setting Workload Environment Variables",id:"setting-workload-environment-variables",level:3},{value:"Setting Secrets",id:"setting-secrets",level:3},{value:"Volumes and Mounts",id:"volumes-and-mounts",level:3},{value:"Port Mapping",id:"port-mapping",level:3},{value:"Initializing Databases",id:"initializing-databases",level:3},{value:"Directly Modifying Resources",id:"directly-modifying-resources",level:3},{value:"Defining the <code>dev</code> container",id:"defining-the-dev-container",level:3},{value:"Troubleshooting the <code>.raftt</code> File",id:"troubleshooting-the-raftt-file",level:2},{value:"Viewing the Resources Expected to be Deployed",id:"viewing-the-resources-expected-to-be-deployed",level:3},{value:"Multi-repo Support",id:"multi-repo-support",level:2},{value:"Cloning Secondary Repositories",id:"cloning-secondary-repositories",level:3},{value:"Access an Already-cloned Repo",id:"access-an-already-cloned-repo",level:3},{value:"Deploy the <code>.raftt</code> File of a Secondary Repo",id:"deploy-the-raftt-file-of-a-secondary-repo",level:3},{value:"<code>raftt sync</code> command",id:"raftt-sync-command",level:3},{value:"Branch Switching in Synced Repos",id:"branch-switching-in-synced-repos",level:4},{value:"Impact on <code>raftt rebuild</code> commands",id:"impact-on-raftt-rebuild-commands",level:4},{value:"Running Raftt Commands From the Context of Synced Repo",id:"running-raftt-commands-from-the-context-of-synced-repo",level:4},{value:"Local Configuration",id:"local-configuration",level:2},{value:"Accessing the Local Environment Variables",id:"accessing-the-local-environment-variables",level:3},{value:"Arguments",id:"arguments",level:3},{value:"Persistency of the Config Arguments",id:"persistency-of-the-config-arguments",level:4},{value:"JSON/YAML Encoding/Decoding",id:"jsonyaml-encodingdecoding",level:2},{value:"File Watching",id:"file-watching",level:2},{value:"Example file",id:"example-file",level:3},{value:"Changing the Hooks",id:"changing-the-hooks",level:3},{value:"Viewing the Hook Mechanism Logs",id:"viewing-the-hook-mechanism-logs",level:3}],m={toc:c};function u(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("h3",{id:"what-is-a-raftt-file"},"What is a ",(0,r.kt)("inlineCode",{parentName:"h3"},".raftt")," File"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file is a file in which your Raftt environment is defined. It is written in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bazelbuild/starlark"},"Starlark")," - a python-like scripting language open-sourced by Google."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," is expected to be committed to your project\u2019s repo and shared between all devs. Different repo branches may contain different ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," files, which allows Raftt env definition to differ between branches."),(0,r.kt)("h3",{id:"configuring-the-raftt-file-in-rafttyml"},"Configuring the ",(0,r.kt)("inlineCode",{parentName:"h3"},".raftt")," File in ",(0,r.kt)("inlineCode",{parentName:"h3"},"raftt.yml")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"envDefinition")," field in the ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt.yml")," is used to configure the path to the ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file that defines the environment spawned by Raftt."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# An example for a raftt.yml that spawns an env defined in example.raftt\nenvDefinition: acme.raftt\nhost: admiral.acme.raftt.io\nsecrets: \n    ...\n    ...\n")),(0,r.kt)("h3",{id:"when-is-the-raftt-file-evaluated"},"When is the ",(0,r.kt)("inlineCode",{parentName:"h3"},".raftt")," File Evaluated"),(0,r.kt)("p",null,"The output of the interpretation of a ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file is a set of resource definitions to-be-deployed."),(0,r.kt)("h4",{id:"on-raftt-up"},"On ",(0,r.kt)("inlineCode",{parentName:"h4"},"raftt up")),(0,r.kt)("p",null,"What exactly ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt up")," does depends on the status of the environment for the current branch. The status of all your envs can be viewed using ",(0,r.kt)("a",{parentName:"p",href:"https://docs.raftt.io/docs/cli_reference#raftt-list"},(0,r.kt)("inlineCode",{parentName:"a"},"raftt list")),".\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file will be interpreted on ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt up")," only if the branch doesn\u2019t have any existing env.\nIf the current branch has a ",(0,r.kt)("inlineCode",{parentName:"p"},"connected")," env, ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt up")," connects to the env. If the env is ",(0,r.kt)("inlineCode",{parentName:"p"},"running"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt up")," connects to it and makes it ",(0,r.kt)("inlineCode",{parentName:"p"},"connected"),", without modifying the env. If the env is ",(0,r.kt)("inlineCode",{parentName:"p"},"hibernated"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt up")," will wake it up (without re-interpreting the ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file)."),(0,r.kt)("h4",{id:"on-raftt-rebuild"},"On ",(0,r.kt)("inlineCode",{parentName:"h4"},"raftt rebuild")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file is interpreted on every ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt rebuild"),". The interpretation result is a set of resources. What happens with this set, depends on whether any resources were specified in the ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt rebuild")," command.\nIf you didn\u2019t specify resources, all of the existing resources are taken down, and the output of the interpretation is deployed. If one or more resources were specified, any changes to these resources will be applied, and the rest will not change, even if the result of the interpretation differs from their current state."),(0,r.kt)("h3",{id:"the-deploy-function"},"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"deploy()")," Function"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"deploy()")," function receives a ",(0,r.kt)("a",{parentName:"p",href:"#resources"},(0,r.kt)("inlineCode",{parentName:"a"},"Resources"))," object and adds the resources to the set of resources to-be-deployed when running ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt up")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"rebuild"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"deploy()")," can be called multiple times, each call adds the input resources to the previously added set. Trying to deploy a resource that shares the same type and name as a previously-deployed resource will result in an error. Resources of different types can share a name.  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'deploy(k8s_manifests("./k8s_manifests"))\n\nresources = docker_compose("./docker-compose.yml")\nprint(type(resources)) # Will print "Resources"\ndeploy(resources)\n')),(0,r.kt)("h2",{id:"data-types"},"Data Types"),(0,r.kt)("h3",{id:"starlark-data-types"},"Starlark Data Types"),(0,r.kt)("p",null,"As the script in ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," files is written in Starlark, all ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bazelbuild/starlark/blob/master/spec.md#data-types"},"Starlak data types")," can be used in ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," files."),(0,r.kt)("h3",{id:"resources"},"Resources"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"Resources")," object contains several dicts, one for each supported resource type. The object types that are currently supported are pods, deployments, ingresses, services, and secrets (these are also the names of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Resources")," object attributes). If you need Raftt to support additional object types, join\xa0",(0,r.kt)("a",{parentName:"p",href:"https://join.slack.com/t/rafttcommunity/shared_invite/zt-196nlb5ra-rYPWEqQF~ETdgx9aqWANnw"},"our community"),"\xa0or\xa0",(0,r.kt)("a",{parentName:"p",href:"https://raftt.io/contact-us"},"contact us"),", and we'll be glad to look into it."),(0,r.kt)("p",null,"The keys in the dicts are the names of the resources, and the values are the objects that represent the resources themselves, as represented by Raftt."),(0,r.kt)("p",null,"When importing resource definitions (from a docker-compose file, Helm charts, or K8s manifests), the result is a ",(0,r.kt)("inlineCode",{parentName:"p"},"Resources")," object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'resources = k8s_manifests("./k8s_manifests") # Can also use Docker Compose and Helm\nprint(type(resources)) # Will print "Resources"\n\n# You can modify the imported resources\nnginx = resources.pods["nginx"]\nnginx.map_port(local=8080, remote=80)\n\n# These are the rest of the supported object types\nresources.deployments\nresources.ingresses\nresources.services\nresources.secrets\n')),(0,r.kt)("h4",{id:"merging-resources-objects"},"Merging ",(0,r.kt)("inlineCode",{parentName:"h4"},"Resources")," Objects"),(0,r.kt)("p",null,"Multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"Resources")," objects can be merged using the ",(0,r.kt)("inlineCode",{parentName:"p"},"+")," operator. Note that the names must be unique - merging ",(0,r.kt)("inlineCode",{parentName:"p"},"Resources")," objects that both have a resource of the same type and the same name will result in an error"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'k8s_resources = k8s_manifests("./k8s_manifests")\ncompose_resources = docker_compose("./path/to/compose.yml", ".")\nall_resources = k8s_resources + compose_resources\n')),(0,r.kt)("h3",{id:"repoworkingtree"},"RepoWorkingTree"),(0,r.kt)("p",null,"In multi-repo scenarios, you may need to access or reference a file that\u2019s in a different repo from the current ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file. The handle to the other repo is an object called ",(0,r.kt)("inlineCode",{parentName:"p"},"RepoWorkingTree"),"."),(0,r.kt)("p",null,"To get this handle you need to either call ",(0,r.kt)("inlineCode",{parentName:"p"},"clone_repo_branch()")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"get_cloned_repo()"),". See ",(0,r.kt)("a",{parentName:"p",href:"#multi-repo-support"},"here")," for more details."),(0,r.kt)("p",null,"A subpath can be added to the ",(0,r.kt)("inlineCode",{parentName:"p"},"RepoWorkingTree")," object using the ",(0,r.kt)("inlineCode",{parentName:"p"},"+")," operator, to access specific files. This can as the file/folder path in functions that receive them as an argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Clone the repo\nsecondary_repo = clone_repo_branch("https://github.com/rafttio/frontend", "main")\n\n# Mount the source code dir to one of the workloads\nsecondary_repo_mount = repo_volume(secondary_repo + "/src")\nresources.deployments["web"].mount(secondary_repo_mount, dst="/app")\n\n# Use it to build an image\nresources.deployments["web"].image_builder = build_image("web", secondary_repo, dockerfile="Dockerfile")\n')),(0,r.kt)("h2",{id:"importing-resource-definitions"},"Importing Resource Definitions"),(0,r.kt)("p",null,"The resource definitions of the env can be imported in the ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file using standard formats - Docker Compose, K8s manifests, and Helm charts. Kustomize support coming soon - if you need it now, join ",(0,r.kt)("a",{parentName:"p",href:"https://join.slack.com/t/rafttcommunity/shared_invite/zt-196nlb5ra-rYPWEqQF~ETdgx9aqWANnw"},"our community")," or ",(0,r.kt)("a",{parentName:"p",href:"https://raftt.io/contact-us"},"contact us"),", and we'll be glad to look into it."),(0,r.kt)("h3",{id:"import-a-docker-compose-file"},"Import a Docker-compose File"),(0,r.kt)("p",null,"To import resources defined in a docker-compose file, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker_compose()")," function.\nIt receives the docker-compose file path and optionally the workdir and the docker-compose profiles. The profiles are passed as a list of profiles to be used.\nThe function returns a ",(0,r.kt)("a",{parentName:"p",href:"#resources"},(0,r.kt)("inlineCode",{parentName:"a"},"Resources"))," object.\nDocker-compose services are converted to Kubernetes pods."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'services = docker_compose("./path/to/compose.yml", ".", profiles=["default", "gui"])\nprint(type(services)) # Will print "Resources"\ndeploy(services)\n')),(0,r.kt)("h3",{id:"import-kubernetes-manifests"},"Import Kubernetes Manifests"),(0,r.kt)("p",null,"To import resources defined using raw Kubernetes manifests, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"k8s_manifests()")," function.",(0,r.kt)("br",{parentName:"p"}),"\n","It receives the path of a K8s manifest, or a directory of manifests. Note that only ",(0,r.kt)("inlineCode",{parentName:"p"},".yml")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".yaml")," files are parsed."),(0,r.kt)("p",null,"The function returns a ",(0,r.kt)("a",{parentName:"p",href:"#resources"},(0,r.kt)("inlineCode",{parentName:"a"},"Resources"))," object containing all the resources defined in the manifests."),(0,r.kt)("p",null,"The object types that are currently supported are pods, deployments, ingresses, services, and secrets (these are also the names of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Resources")," object attributes). If you need Raftt to support additional object types, join\xa0",(0,r.kt)("a",{parentName:"p",href:"https://join.slack.com/t/rafttcommunity/shared_invite/zt-196nlb5ra-rYPWEqQF~ETdgx9aqWANnw"},"our community"),"\xa0or\xa0",(0,r.kt)("a",{parentName:"p",href:"https://raftt.io/contact-us"},"contact us"),", and we'll be glad to look into it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'resources_from_directory = k8s_manifests("./k8s_manifests") # Get manifests from a directory\nresources_from_file = k8s_manifests("./k8s_manifests/pod.yml") # Or a specific file\nprint(type(resources_from_directory)) # Will print "Resources"\nprint(type(resources_from_file)) # Will print "Resources"\n')),(0,r.kt)("h3",{id:"import-helm-charts"},"Import Helm Charts"),(0,r.kt)("p",null,"Raftt lets you use environment definitions defined in local Helm charts using the ",(0,r.kt)("inlineCode",{parentName:"p"},"helm_local_chart")," function. Raftt will run helm with the ",(0,r.kt)("inlineCode",{parentName:"p"},"template")," command and then load and return the generated resources identically to the ",(0,r.kt)("inlineCode",{parentName:"p"},"k8s_manifests")," function."),(0,r.kt)("p",null,"Receives:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Helm release name.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Path to chart (relative to repo root).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"values_files (optional) - string / array of strings of the values files to use. These can be paths to files in the repo / URLs. Same as when using ",(0,r.kt)("inlineCode",{parentName:"p"},"helm template"),", when passing multiple values files, the last one will override the previous files.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"values (optional) - a dictionary of values to be passed to Helm. Will override values defined in the files.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"version (optional) - the version of Helm to use.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Currently, ",(0,r.kt)("inlineCode",{parentName:"p"},"3.10.1")," (default), ",(0,r.kt)("inlineCode",{parentName:"p"},"3.8.2")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"2.13.0")," are supported. Supporting additional versions is easy - ",(0,r.kt)("a",{parentName:"p",href:"https://raftt.io/contact-us"},"contact us")," if you need a different one."))),(0,r.kt)("p",null,"Returns: A ",(0,r.kt)("inlineCode",{parentName:"p"},"Resources")," object containing all the resources defined in the manifests."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'resources = helm_local_chart("blah", "./helm/blah", values_files="./helm/values.dev.yml", version="3.8.2")\n\nresources = helm_local_chart("blah", "./helm/blah", values_files=["https://example.io/values.yml", "./helm/values.dev.yml"], values={"serviceName": "serv", "replicaCount": 1, "ingressPort": 80}, version="3.8.2")\n\nprint(type(resources)) # Will print "Resources"\n')),(0,r.kt)("h2",{id:"image-building"},"Image Building"),(0,r.kt)("p",null,"The docker images used in your environment can be defined in the ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file and built by Raftt. To define an image you wish to build, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"build_image()")," function."),(0,r.kt)("p",null,"The return value of ",(0,r.kt)("inlineCode",{parentName:"p"},"build_image()")," can be assigned to a workload to set the image as the workload\u2019s image. This will overwrite any previous definition of the workload image."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"build_image()")," receives:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ID to be used when referring to the image, e.g. in other Dockerfiles"),(0,r.kt)("li",{parentName:"ul"},"The context for building the Dockerfile."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dockerfile")," (optional, default is ",(0,r.kt)("inlineCode",{parentName:"li"},"CONTEXT/Dockerfile"),") - The path of the Dockerfile. Equivalent to ",(0,r.kt)("inlineCode",{parentName:"li"},"--file")," when using ",(0,r.kt)("inlineCode",{parentName:"li"},"docker build"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"args")," (optional) - the arguments passed to Dockerfile. Similar to ",(0,r.kt)("inlineCode",{parentName:"li"},"--build-arg")," when using ",(0,r.kt)("inlineCode",{parentName:"li"},"docker build"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"target")," (optional) - Set the target build stage to build. Equivalent to ",(0,r.kt)("inlineCode",{parentName:"li"},"--target")," when using ",(0,r.kt)("inlineCode",{parentName:"li"},"docker build"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prebuild")," (optional) - a command to run in the ",(0,r.kt)("inlineCode",{parentName:"li"},"dev")," container before the image is built. It is passed as a string or an iterable of strings, e.g.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'prebuild="/path/to/script.sh"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'prebuild=["python3", "-m", "compileall", "-f", "app.py"]'))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'workload.image_builder = build_image(\'web\', "./docker/web/", dockerfile="./docker/web/Dockerfile", args={"VERSION_ARG": "latest"}, target="builder", prebuild=["python3", "-m", "compileall", "-f", "app.py"])\n')),(0,r.kt)("h3",{id:"using-base-images"},"Using Base Images"),(0,r.kt)("p",null,"Sometimes you may wish to build images that aren\u2019t intended to be directly used as the image of a workload, but instead to be used as a base image for other images. To do that you can call ",(0,r.kt)("inlineCode",{parentName:"p"},"build_image()")," and use the ID to refer to the images in other Dockerfiles (in the ",(0,r.kt)("inlineCode",{parentName:"p"},"FROM")," command)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'build_image(\'raftt/base-python\', \'./docker/python\')\nbuild_image(\'raftt/base-web\', "./docker/web/base-web/", dockerfile=\'./docker/web/base-web/Dockerfile\', args={"CONFIG_TYPE_ARG": "config.DevelopmentConfig", "USERNAME_ARG": "nobody"})\n')),(0,r.kt)("p",null,"Where we could use these images like this (note the references to the image in the ",(0,r.kt)("inlineCode",{parentName:"p"},"FROM")," and the ",(0,r.kt)("inlineCode",{parentName:"p"},"copy --from"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dockerfile"},"FROM raftt/base-python\n\nWORKDIR /app\nCOPY --from=raftt/base-web /some_file /some_file\nCOMMAND bash\n")),(0,r.kt)("h2",{id:"enhancing-and-modifying-the-resources"},"Enhancing and Modifying the Resources"),(0,r.kt)("h3",{id:"setting-workload-environment-variables"},"Setting Workload Environment Variables"),(0,r.kt)("p",null,"Sets a Starlark dictionary as the environment variables of a workload (a Pod or a Deployment)."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"\ud83d\udca1 The function overwrites the previously defined environment variables, rather than appending/overriding the new values.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'pod.set_env_vars({"KEY": "VALUE"})\ndeploy(pod)\n')),(0,r.kt)("h3",{id:"setting-secrets"},"Setting Secrets"),(0,r.kt)("p",null,"The commands to fetch the secrets are defined in the ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt.yml")," file (see our ",(0,r.kt)("a",{parentName:"p",href:"/docs/config/raftt.yml"},"docs"),"). This is because the commands are run on the local machine and the ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file is interpreted remotely, on the env controller."),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file, the secrets can be mounted to the workloads, using ",(0,r.kt)("a",{parentName:"p",href:"#volumes-and-mounts"},"volume mounts"),", assuming the secret is defined with the attribute ",(0,r.kt)("inlineCode",{parentName:"p"},"outputvolume: true"),"."),(0,r.kt)("p",null,"Another method to define secrets, that isn\u2019t related to the ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file is defining cluster secrets, that can be access from the envs. For more information, see our ",(0,r.kt)("a",{parentName:"p",href:"../cli_reference#raftt-cluster-secrets"},"docs"),"."),(0,r.kt)("p",null,"There are few ways to define secrets for Raftt envs:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Fetch secrets from the local machine. The commands to fetch these secrets are defined in the ",(0,r.kt)("inlineCode",{parentName:"li"},"raftt.yml")," (see our ",(0,r.kt)("a",{parentName:"li",href:"/docs/config/raftt.yml"},"docs"),"). This is because the commands should run on the local machine and the ",(0,r.kt)("inlineCode",{parentName:"li"},".raftt")," file is interpreted remotely, on the env controller."),(0,r.kt)("li",{parentName:"ul"},"Cluster secrets accessible from all envs running on the private cluster. For more information, see our ",(0,r.kt)("a",{parentName:"li",href:"https://docs.raftt.io/docs/cli_reference#raftt-cluster-secrets"},"docs"),"."),(0,r.kt)("li",{parentName:"ul"},"Defining K8s ",(0,r.kt)("inlineCode",{parentName:"li"},"secret")," objects by importing from a Helm chart or a K8s manifest.")),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file, the secrets can be mounted to the workloads, using ",(0,r.kt)("a",{parentName:"p",href:"#volumes-and-mounts"},"volume mounts"),", assuming the secret is defined with the attribute ",(0,r.kt)("inlineCode",{parentName:"p"},"outputvolume: true"),"."),(0,r.kt)("h3",{id:"volumes-and-mounts"},"Volumes and Mounts"),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file, you can mount different kinds of volumes into the workloads. Defining these mounts provide various capabilities -"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Mounting a repo dir (synced with the local machine)"),(0,r.kt)("li",{parentName:"ul"},"Mounting a volume (named or unnamed)"),(0,r.kt)("li",{parentName:"ul"},"Mount a secret, defined in ",(0,r.kt)("inlineCode",{parentName:"li"},"raftt.yml")," or as a cluster secret",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Mounting a secret defined using a Kubernetes manifest using the ",(0,r.kt)("inlineCode",{parentName:"li"},".raftt")," file is currently not supported."))),(0,r.kt)("li",{parentName:"ul"},"All mounts can be read-write (the default) or read-only, except for secrets that are always read-only."),(0,r.kt)("li",{parentName:"ul"},"Use the ",(0,r.kt)("inlineCode",{parentName:"li"},"init-on-rebuild")," argument, available for volumes, to configure the volume to be re-initialized on every call to ",(0,r.kt)("inlineCode",{parentName:"li"},"raftt rebuild <service>."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This is useful, for example, if the image being run already has node_modules and after rebuild we want to set the volume contents with the updated modules.")))),(0,r.kt)("p",null,"You first need to create a volume of any kind (if it\u2019s a secret from ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt.yml"),", it\u2019s already mounted) and then mount it to one or more workloads"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Repo volume - used commonly for syncing the source code\nrepo_root = repo_volume()\npod_a.mount(repo_root, dst="/code", read_only=True)\ndeployment_b.mount(repo_root.subpath("./test_dir"), dst="/tmp/test_dir")\n\n# Anonymous volume\nanon_volume = volume()  # Anonymous, since no name was provided\n\n# Named volume\nvol_foo = volume(name="foo")\ndeployment_b.mount(vol_foo, dst="/etc/foo", read_only=True, init_on_rebuild=True)\npod_a.mount(vol_foo, dst="/tmp/etc", read_only=False, init_on_rebuild=True)\n\n#Secrets\n# Assuming `test-credentials` is defined in raftt.yml with `outputvolume: true`\npod_a.mount(secret_volume("test-credentials"), dst="/tmp/test_creds", read_only=True)\n')),(0,r.kt)("h3",{id:"port-mapping"},"Port Mapping"),(0,r.kt)("p",null,"Allows mapping workload ports into the local machine. Currently supports only specific ports, no random ports or port ranges."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"nginx.map_port(local=8080, remote=80)\n")),(0,r.kt)("h3",{id:"initializing-databases"},"Initializing Databases"),(0,r.kt)("p",null,"Allows to define database initialization used for database seeding and by the ",(0,r.kt)("a",{parentName:"p",href:"/docs/cli_reference#raftt-data"},(0,r.kt)("inlineCode",{parentName:"a"},"raftt data"))," commands (",(0,r.kt)("inlineCode",{parentName:"p"},"seed"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"dump"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"save"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"load"),") commands."),(0,r.kt)("p",null,"Raftt currently supports three types of initializers - two native initializers - for PostgreSQL and MongoDB, and a custom initializer using a script. For more information on data seeding, see our ",(0,r.kt)("a",{parentName:"p",href:"https://docs.raftt.io/docs/config/db_seeding"},"docs"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'db_storage_vol = volume("db_storage")\n\nresources = ...  # Load from docker-compose, helm, or k8s manifests\ndb_storage_vol = resources.named_volumes["db_storage"]\ndb_pod = resources.pods["db"]\n\ndb_pod.mount(db_storage_vol, dst="/data")\n\n# Use a native PostgreSQL initializer\n# API: postgres_volume_initializer(workload, dump_file_path, user?, key_provider?)\ndb_storage_vol.initializer = postgres_volume_initializer(workload=db_pod, dump_file_path="dev_container/dump.sql", user="postgres")\n\n# Use a native MongoDB initializer\n# API: mongodb_volume_initializer(workload, dump_file_path, key_provider?)\ndb_storage_vol.initializer = mongodb_volume_initializer(workload=db_pod, dump_file_path="dev_container/dump.archive")\n\n# Use a custom initializer\n# API: script_volume_initializer(workload, script, key_provider?)\nseeded_db_storage_vol.initializer = script_volume_initializer(workload=seeded_db_pod, script="bash seed_db.sh")\n\n')),(0,r.kt)("h3",{id:"directly-modifying-resources"},"Directly Modifying Resources"),(0,r.kt)("p",null,"You can modify some fields of loaded resources, as described in the example below."),(0,r.kt)("p",null,"More attributes will be editable in the future."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'resources = ...  # Load from docker-compose, helm, or k8s manifests\n\n# Editing metadata\n## For pods\nresources.pods["nginx"].metadata.annotations["foo"] = "bar"\nresources.pods["nginx"].metadata.labels["baz"] = "qux"\n\n## For deployments - both the deployment and the template\nresources.deployments["web"].metadata.annotations["deployment-annotation"] = "foo"\nresources.deployments["web"].metadata.labels["deployment-label"] = "bar"\nresources.deployments["web"].spec.template.metadata.annotations["template-annotation"] = "baz"\nresources.deployments["web"].spec.template.metadata.labels["template-label"] = "qux"\n\n## For other resources - services, ingresses, secrets\nresources.ingresses["minimal-ingress"].metadata.labels["ingress-label"] = "one"\nresources.ingresses["minimal-ingress"].metadata.annotations["ingress-annotation"] = "two"\nresources.services["my-service"].metadata.labels["service-label"] = "three"\nresources.services["my-service"].metadata.annotations["service-annotation"] = "four"\nresources.secrets["top-secret"].metadata.labels["secret-label"] = "five"\nresources.secrets["top-secret"].metadata.annotations["secret-annotation"] = "six"\n\n# Editing PodSpec and DeploymentSpec\nresources.pods["nginx"].spec.hostname = "nginy" \nresources.deployments["web"].spec.template.spec.hostname = "nginy-dep"\nresources.deployments["web"].spec.replicas = 1  # Not supporting deploying multiple replicas, for now.\nresources.pods["nginx"].spec.containers[0].name = "foo" \nresources.pods["nginx"].spec.containers[0].working_dir = "/path/to/code"\nresources.pods["nginx"].spec.containers[0].command = ["/bin/echo"]\nresources.pods["nginx"].spec.containers[0].args = ["hello", "world"]\nresources.deployments["web"].spec.template.spec.containers[0].name = "foo" \nresources.deployments["web"].spec.template.spec.containers[0].working_dir = "/path/to"\nresources.deployments["web"].spec.template.spec.containers[0].command = ["/bin/echo"]\nresources.deployments["web"].spec.template.spec.containers[0].args = ["hello", "world"]\n')),(0,r.kt)("h3",{id:"defining-the-dev-container"},"Defining the ",(0,r.kt)("inlineCode",{parentName:"h3"},"dev")," container"),(0,r.kt)("p",null,"To define the dev container (see ",(0,r.kt)("a",{parentName:"p",href:"https://docs.raftt.io/docs/config/dev_container"},"docs"),"), call the function ",(0,r.kt)("inlineCode",{parentName:"p"},"deploy_dev_container()"),". The dev container is a pod that is imported using any of the supported resource definition methods (docker-compose / K8s manifest / Helm)."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"dev = docker_compose('./dev-container/dev_compose.yml')\ndeploy_dev_container(dev)\n")),(0,r.kt)("p",null,"A dev container must be defined exactly once. When deploying another ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file, in ",(0,r.kt)("a",{parentName:"p",href:"#multi-repo-support"},"multi-repo")," scenarios, make sure that only one repo actually defines the dev container."),(0,r.kt)("p",null,"For backwards compatibility, the dev container can still be defined in ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt.yml"),". Defining a dev container both in ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt.yml")," and in the ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file, will result in an error."),(0,r.kt)("h2",{id:"troubleshooting-the-raftt-file"},"Troubleshooting the ",(0,r.kt)("inlineCode",{parentName:"h2"},".raftt")," File"),(0,r.kt)("p",null,"When you write your ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file, like any other case of writing code, the result may differ from what you expected. To help you understand why that happens, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt config debug")," command. Note that since the ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file interpretation happens in the remote env, for the ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt config debug")," command to work, you must have an active and connected env. To view your env status, use ",(0,r.kt)("a",{parentName:"p",href:"https://docs.raftt.io/docs/cli_reference#raftt-list"},(0,r.kt)("inlineCode",{parentName:"a"},"raftt list")),"."),(0,r.kt)("p",null,"When you do that you get the dry-run results of interpreting the ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file. The file is fully interpreted but instead of deploying the changes to the env, it outputs the results of all the ",(0,r.kt)("inlineCode",{parentName:"p"},"print()")," calls in the file. You can use this function to print any of the objects in the script."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"resources = k8s_manifests(\"./k8s_manifests/pod.yml\")\nprint(resources.pods['nginx'])\n")),(0,r.kt)("h3",{id:"viewing-the-resources-expected-to-be-deployed"},"Viewing the Resources Expected to be Deployed"),(0,r.kt)("p",null,"To view the \u201cfinal result\u201d of the ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file interpretation - the list of the resources that are expected to be deployed, run ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt config debug")," with the flag ",(0,r.kt)("inlineCode",{parentName:"p"},"--to-be-deployed"),"."),(0,r.kt)("h2",{id:"multi-repo-support"},"Multi-repo Support"),(0,r.kt)("p",null,"Raftt lets you deploy environments whose code and definitions are held in multiple repositories.",(0,r.kt)("br",{parentName:"p"}),"\n","In this context, we have two kinds of repos -"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("em",{parentName:"li"},"main")," repo - the repo from which the user runs ",(0,r.kt)("inlineCode",{parentName:"li"},"raftt up"),". The ",(0,r.kt)("inlineCode",{parentName:"li"},".raftt")," file of this repo is the one interpreted. This repo is automatically live-synced to the remote env."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("em",{parentName:"li"},"Secondary")," repos - repos that are loaded when explicitly requested in the ",(0,r.kt)("inlineCode",{parentName:"li"},".raftt")," file of a previously loaded repo. Such repos don\u2019t automatically sync to the env, and don\u2019t even have to be cloned locally.")),(0,r.kt)("p",null,"Whether a repo is considered ",(0,r.kt)("em",{parentName:"p"},"main")," or ",(0,r.kt)("em",{parentName:"p"},"secondary")," depends on the context of the specific ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt up")," executed - it\u2019s not a characteristic of the repo itself."),(0,r.kt)("h3",{id:"cloning-secondary-repositories"},"Cloning Secondary Repositories"),(0,r.kt)("p",null,"For all multi-repo scenarios, you must get access to the secondary repo(s) from the context of the ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file. To do that you must first clone it using the ",(0,r.kt)("inlineCode",{parentName:"p"},"clone_repo_branch()")," function. This function clones the repo into the environment, receiving a Git URL and a branch name. The command returns a ",(0,r.kt)("a",{parentName:"p",href:"#repoworkingtree"},(0,r.kt)("inlineCode",{parentName:"a"},"RepoWorkingTree"))," object that can be used to access the repo files or to ",(0,r.kt)("a",{parentName:"p",href:"#the-deploy-function"},"deploy")," the resources defined in it."),(0,r.kt)("p",null,"A subpath may be added to a ",(0,r.kt)("inlineCode",{parentName:"p"},"RepoWorkingTree")," object using the ",(0,r.kt)("inlineCode",{parentName:"p"},"+")," operator, in order to retrieve a sub-path inside the side repository. The operation results in a new ",(0,r.kt)("inlineCode",{parentName:"p"},"RepoWorkingTree"),"."),(0,r.kt)("p",null,"A repo can\u2019t be cloned twice in the same environment with different branches, so make sure you don\u2019t have contradicting branches in different ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," files (see also the next section)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Clone the repo\nsecondary_repo = clone_repo_branch("https://github.com/rafttio/frontend", "main")\n\n# Mount the source code dir to one of the workloads\nsecondary_repo_mount = repo_volume(secondary_repo + "src")\nresources.deployments["web"].mount(secondary_repo_mount, dst="/app")\n\n# Use it to build an image\nresources.deployments["web"].image_builder = build_image("web", secondary_repo, dockerfile="Dockerfile")\n')),(0,r.kt)("h3",{id:"access-an-already-cloned-repo"},"Access an Already-cloned Repo"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"get_cloned_repo()")," function is used to retrieve a",(0,r.kt)("a",{parentName:"p",href:"#repoworkingtree"},(0,r.kt)("inlineCode",{parentName:"a"},"RepoWorkingTree"))," object of a previously cloned Git repository. The function receives only the Git URL. This function helps you access the same repo from different ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," files without worrying about having matching branches to prevent an error. The first ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file using the repo has to define the branch, and the others can get a handle to the cloned repo using this function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Get a handle to the repo, assuming it was already cloned in another .raftt file\nsecondary_repo = get_cloned_repo("https://github.com/rafttio/frontend")\n\n# Mount the source code dir to one of the workloads\nsecondary_repo_mount = repo_volume(secondary_repo + "src")\nresources.deployments["web"].mount(secondary_repo_mount, dst="/app")\n\n# Use it to build an image\nresources.deployments["web"].image_builder = build_image("web", secondary_repo, dockerfile="Dockerfile")\n')),(0,r.kt)("h3",{id:"deploy-the-raftt-file-of-a-secondary-repo"},"Deploy the ",(0,r.kt)("inlineCode",{parentName:"h3"},".raftt")," File of a Secondary Repo"),(0,r.kt)("p",null,"In some cases, instead of accessing the secondary repo\u2019s files and/or folders, as described in the previous sections, you may want to deploy all the resources defined in its ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file. For that purpose, you can use ",(0,r.kt)("a",{parentName:"p",href:"#repoworkingtree"},(0,r.kt)("inlineCode",{parentName:"a"},"RepoWorkingTree")),"\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"deploy()")," method."),(0,r.kt)("p",null,"This method only receives ",(0,r.kt)("inlineCode",{parentName:"p"},"config_args")," as an input argument and does not return a value. It triggers the interpretation of the ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file defined in the secondary repo (as defined in its ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt.yml"),"). The outcome of the interpretation is additional resources to be deployed to the env."),(0,r.kt)("p",null,"Note that different ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," files are executed separately and have no access to one another\u2019s objects."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'secondary_repo = clone_repo_branch("https://github.com/rafttio/frontend", "main")\nsecondary_repo.deploy(config_args=\'{"profile": "default"}\')\n')),(0,r.kt)("h3",{id:"raftt-sync-command"},(0,r.kt)("inlineCode",{parentName:"h3"},"raftt sync")," command"),(0,r.kt)("p",null,"As mentioned ",(0,r.kt)("a",{parentName:"p",href:"#deploy-the-raftt-file-of-a-secondary-repo"},"above"),", secondary repos do not have file syncing / hot reloading enabled by default, and they don\u2019t even have to be cloned locally. If you want to start syncing the local state of a cloned secondary repo to the remote env, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt sync")," command."),(0,r.kt)("h4",{id:"branch-switching-in-synced-repos"},"Branch Switching in Synced Repos"),(0,r.kt)("h4",{id:"impact-on-raftt-rebuild-commands"},"Impact on ",(0,r.kt)("inlineCode",{parentName:"h4"},"raftt rebuild")," commands"),(0,r.kt)("p",null,"Switching branches in the main repo creates a new Raftt env for the new branch, or switches to one if it already exists. When doing it in a synced secondary repo, the file changes happen in-place, without changing the env. The file changes are synced to the remote repo, and depends on the changes, you might want to run ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt restart")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt rebuild"),"."),(0,r.kt)("p",null,"When running ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt rebuild"),", the main and secondary ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," files are re-interpreted. When rebuilding, the branches specified in ",(0,r.kt)("inlineCode",{parentName:"p"},"clone_repo_branch()")," are ignored for synced repos - the current repo state is used."),(0,r.kt)("h4",{id:"running-raftt-commands-from-the-context-of-synced-repo"},"Running Raftt Commands From the Context of Synced Repo"),(0,r.kt)("p",null,"Currently, Raftt commands (",(0,r.kt)("inlineCode",{parentName:"p"},"sh"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"logs"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"status"),", ...) may only be run from the main repo from which the original ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt up")," was performed."),(0,r.kt)("h2",{id:"local-configuration"},"Local Configuration"),(0,r.kt)("p",null,"In some cases, users may want to customize the environment created by ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt up")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt rebuild")," without changing the ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file that\u2019s committed to the repo. This can be done either by referring to the local environment variables from the ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file, or by running it with arguments."),(0,r.kt)("h3",{id:"accessing-the-local-environment-variables"},"Accessing the Local Environment Variables"),(0,r.kt)("p",null,"Env variables from the host are available as a dict in ",(0,r.kt)("inlineCode",{parentName:"p"},"local.env"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"env_var = local.env['MY_ENV_VAR']\n")),(0,r.kt)("h3",{id:"arguments"},"Arguments"),(0,r.kt)("p",null,"You can send arguments to ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt up")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt rebuild")," commands that can be accessed from the ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file. The args can be received in the CLI using the ",(0,r.kt)("inlineCode",{parentName:"p"},"--config-args")," option or to be read from a file using the ",(0,r.kt)("inlineCode",{parentName:"p"},"--config-args-file")," option that receives the file path. The string value passed in the CLI or in the file contents can be accessed from the ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file using the ",(0,r.kt)("inlineCode",{parentName:"p"},"local.config_args")," variable."),(0,r.kt)("p",null,"The input can be formatted in any format of your choice, but some formats have builtin parsers (see ",(0,r.kt)("a",{parentName:"p",href:"#jsonyaml-encodingdecoding"},"here"),")."),(0,r.kt)("p",null,"A common use-case for using arguments is stating which docker-compose profiles are to be deployed"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'load("encoding/json.star", "json")\n# This assumes args are a "serialized" json string\ninput_args = json.decode(local.config_args)\nprofiles = input_args[\'compose_profiles\']\ndeploy(docker_compose("./path/to/compose.yml", ".", profiles=profiles))\n')),(0,r.kt)("h4",{id:"persistency-of-the-config-arguments"},"Persistency of the Config Arguments"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file is interpreted on every ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt rebuild"),". Every interpretation potentially uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"config_args")," variable. To save the user from having to remember the ",(0,r.kt)("inlineCode",{parentName:"p"},"config_args")," used for the running env, Raftt stores the last ",(0,r.kt)("inlineCode",{parentName:"p"},"config_args")," used and uses the same string for future ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt rebuild"),"s. If you want to change the ",(0,r.kt)("inlineCode",{parentName:"p"},"config_args")," used, run ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt rebuild")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"--config-args")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"--config-args-file"),". The new args will overwrite the existing args, and will be used for the current rebuild and for future ones."),(0,r.kt)("h2",{id:"jsonyaml-encodingdecoding"},"JSON/YAML Encoding/Decoding"),(0,r.kt)("p",null,"If you wish to encode and/or decode JSON or YAML inside your ",(0,r.kt)("inlineCode",{parentName:"p"},".raftt")," file, you can do it by loading external modules using the ",(0,r.kt)("inlineCode",{parentName:"p"},"load()")," function. The load function gets the module and the name symbol you wish to load. In the code snippet below you can see the exact syntax for loading the JSON and YAML libraries and using them."),(0,r.kt)("p",null,"Handling JSON and YAML can very handy in conjunction with ",(0,r.kt)("a",{parentName:"p",href:"#arguments"},"local.config_args"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'load("encoding/json.star", "json")\nload("encoding/yaml.star", "yaml")\nprint(json.encode({"a":1, "b": 2})) # Prints: {"a":1,"b":2}\nyaml_dict = """apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      name: web\n"""\nprint(yaml.loads(yaml_dict)) # Prints: {"apiVersion": "apps/v1", "kind": "Deployment", "metadata": {"name": "web"}}\n')),(0,r.kt)("p",null,"For this functionality, Raftt uses ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/qri-io/starlib"},"Starlib")," - a community-driven project to bring a standard library to Starlark. It has additional features besides handling JSON and YAML. You can read about them and see usage documentation in their ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/qri-io/starlib#readme"},"repo"),"."),(0,r.kt)("h2",{id:"file-watching"},"File Watching"),(0,r.kt)("p",null,"This mechanism allows registering hooks that trigger actions when files that match a given glob patterns changed. The patterns must contain absolute paths, relative paths will raise an error."),(0,r.kt)("p",null,"When registering a hook you need to specify the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"One or more workloads to watch glob patterns for changed files - the ",(0,r.kt)("inlineCode",{parentName:"li"},"on")," argument"),(0,r.kt)("li",{parentName:"ul"},"One or more actions to perform when a file changes matching one of the glob patterns - the ",(0,r.kt)("inlineCode",{parentName:"li"},"do")," argument")),(0,r.kt)("p",null,"Hooks registered with more than one action will execute the commands in order of definition."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"actions.CMD")," constructor creates a command type that receives a command to execute as a string or an iterable of strings and a workload to execute the command on"),(0,r.kt)("p",null,"Common use-cases -"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Auto-install dependencies by watching files like ",(0,r.kt)("inlineCode",{parentName:"li"},"package.json")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"requirements.txt")),(0,r.kt)("li",{parentName:"ul"},"Auto-build the code on file changes by watching the source code files, e.g. all the ",(0,r.kt)("inlineCode",{parentName:"li"},"*.ts")," files in the relevant folders.")),(0,r.kt)("h3",{id:"example-file"},"Example file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'resources = k8s_manifests("./test-manifests.yml")\n\nnginx = resources.pods["nginx"]\nnginx_dep = resources.deployments["nginx-dep"]\npip_install = ["pip", "install", "-r", "requierments.txt"]\npackage_json_glob = "/app/**/package.json"\n\nregister_hook(\n    on=[events.OnFileChanged(workload=nginx, patterns=package_json_glob),=nginx, patterns=package_json_glob),\n        events.OnFileChanged(workload=nginx_dep, patterns=package_json_glob)],\n    do=actions.CMD(workload=nginx, cmd=("npm", "install")))\nregister_hook(\n    on=events.OnFileChanged(workload=nginx_dep, patterns="/root/requirements.txt"),\n    do=(actions.CMD(workload=nginx, cmd=pip_install),\n        actions.CMD(workload=nginx_dep, cmd=pip_install)))\ndeploy(resources)\n')),(0,r.kt)("p",null,"When the ",(0,r.kt)("inlineCode",{parentName:"p"},"requirements.txt")," file changes on the ",(0,r.kt)("inlineCode",{parentName:"p"},"nginx_dep")," workload, the command ",(0,r.kt)("inlineCode",{parentName:"p"},"pip install -r requirements.txt")," is executed on the ",(0,r.kt)("inlineCode",{parentName:"p"},"nginx")," pod and ",(0,r.kt)("inlineCode",{parentName:"p"},"nginx_dep")," deployment."),(0,r.kt)("h3",{id:"changing-the-hooks"},"Changing the Hooks"),(0,r.kt)("p",null,"The hook is \u201ccontrolled\u201d by the workload that watches the glob patterns. It means that in order to apply changes to a hook, either a change in the watchers (the ",(0,r.kt)("inlineCode",{parentName:"p"},"on")," clause) or in the actions (the ",(0,r.kt)("inlineCode",{parentName:"p"},"do")," clause), the \u201cwatching\u201d workload must be rebuilt. The \u201caffected\u201d workload (the one in which the action is performed) only needs to be rebuilt if the action is modified, not necessarily if the watcher was modified."),(0,r.kt)("h3",{id:"viewing-the-hook-mechanism-logs"},"Viewing the Hook Mechanism Logs"),(0,r.kt)("p",null,"The logs for the hooks, including the result of the actions, are ",(0,r.kt)("strong",{parentName:"p"},"not")," a part of the regular workload logs. To view the logs, run ",(0,r.kt)("inlineCode",{parentName:"p"},"raftt logs --hooks")," with or without specifying service. If you don\u2019t specify a service, you will view the full log of the hook mechanism."))}u.isMDXComponent=!0}}]);